{"version":3,"sources":["components/editable-item/index.js","components/editable-item/editable-item.js","components/tree-node/index.js","components/tree-node/tree-node.js","components/add-button/index.js","components/add-button/add-button.js","components/control-panel/index.js","components/control-panel/control-panel.js","components/text-view/index.js","components/text-view/text-view.js","components/tree/index.js","components/tree/tree.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["EditableItem","props","title","changeTitle","removeNode","addChild","className","onClick","onChange","e","target","value","placeholder","TreeNode","children","otherProps","hasChildren","undefined","map","nodeProps","id","others","renderChildren","AddButton","ControlPanel","hasSaved","saveState","loadState","TextView","Tree","state","nodes","initializedĞ¡opy","data","savedNodes","bind","addRootElement","onTextChange","nodesToString","location","nodesCopy","i","length","this","newTitle","split","str","parseInt","changingNode","setState","newNode","join","newNodes","slice","index","newChildren","JSON","parse","stringify","simplify","Component","DEFAULT_NODES","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.884f7d8c.chunk.js","sourcesContent":["import EditableItem from \"./editable-item\";\r\nexport default EditableItem;","import React from \"react\";\r\nimport \"./editable-item.css\";\r\n\r\nconst EditableItem = (props) => {\r\n    const { title, changeTitle, removeNode, addChild } = props;\r\n\r\n    return (\r\n        <div className=\"EditableItem\">\r\n        \r\n            <button\r\n               className=\"EditableItem-Button EditableItem-Button_add\"\r\n               onClick={addChild}>\r\n                 +\r\n            </button>\r\n\r\n            <button\r\n              className=\"EditableItem-Button EditableItem-Button_remove\" \r\n              onClick={removeNode}>\r\n                x\r\n            </button>\r\n            \r\n            <input\r\n              className=\"EditableItem-Text\"\r\n              onChange={(e) => { changeTitle(e.target.value) }}\r\n              value={title}\r\n              placeholder=\"New Item\"\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditableItem;","import TreeNode from \"./tree-node\";\r\nexport default TreeNode;","import React from \"react\";\r\nimport EditableItem from \"../editable-item\";\r\nimport \"./tree-node.css\";\r\n\r\nconst TreeNode = ({ children, ...otherProps }) => {\r\n    const hasChildren = children !== undefined;\r\n\r\n    const renderChildren = (children) => {\r\n        return (\r\n            <ul>\r\n                { children.map((nodeProps) => {\r\n                    const { id, ...others } = nodeProps;\r\n                    return (\r\n                        <TreeNode \r\n                          key={id}\r\n                          {...others}\r\n                        />\r\n                    );\r\n                }) }\r\n            </ul>\r\n        );\r\n    }        \r\n\r\n    return (\r\n        <li>\r\n            <div className=\"TreeNode\">\r\n                <EditableItem {...otherProps} />\r\n            </div>\r\n            {hasChildren && renderChildren(children)}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TreeNode;","import AddButton from \"./add-button\";\r\nexport default AddButton;","import React from \"react\";\r\nimport \"./add-button.css\";\r\n\r\nconst AddButton = ( {onClick} ) => {\r\n    return (\r\n      <div className=\"AddButton\">\r\n          <button \r\n            className=\"AddButton-Inner\" \r\n            onClick={onClick}\r\n            value>\r\n            +\r\n          </button>\r\n      </div>\r\n    );   \r\n}\r\n\r\nexport default AddButton;","import ControlPanel from \"./control-panel\";\r\nexport default ControlPanel;","import React from \"react\";\r\nimport \"./control-panel.css\";\r\n\r\nconst ControlPanel = (props) => {\r\n    const { hasSaved, saveState, loadState } = props;\r\n    const renderLoadButton = () => {\r\n        if (hasSaved) {\r\n            return (\r\n                <button className=\"ControlPanel-Button ControlPanel-Button_load\" \r\n                  onClick={loadState}>\r\n                    Load\r\n                </button>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"ControlPanel\">\r\n            <button className=\"ControlPanel-Button ControlPanel-Button_save\" \r\n              onClick={saveState}>\r\n                Save\r\n            </button>\r\n            { renderLoadButton() }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ControlPanel;","import TextView from \"./text-view\";\r\nexport default TextView;","import React from \"react\";\r\nimport \"./text-view.css\";\r\n\r\nconst TextView = ( { onChange, value } ) => {\r\n    return (\r\n        <div className=\"TextView\">\r\n            <textarea \r\n              className=\"TextView-Area\"\r\n              value={value}\r\n              onChange={onChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextView;","import Tree from \"./tree\";\r\nexport default Tree;","import React, { Component } from \"react\";\r\nimport TreeNode from \"../tree-node\";\r\nimport AddButton from \"../add-button\";\r\nimport ControlPanel from \"../control-panel\";\r\nimport TextView from \"../text-view\";\r\nimport \"./tree.css\";\r\n\r\n\r\nclass Tree extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nodes: this.initializedĞ¡opy(this.props.data),\r\n            savedNodes: [],\r\n        }\r\n        this.changeTitle = this.changeTitle.bind(this);\r\n        this.addRootElement = this.addRootElement.bind(this);\r\n        this.addChild = this.addChild.bind(this);\r\n        this.removeNode = this.removeNode.bind(this);\r\n        this.saveState = this.saveState.bind(this);\r\n        this.loadState = this.loadState.bind(this);\r\n        this.onTextChange = this.onTextChange.bind(this);\r\n        this.nodesToString = this.nodesToString.bind(this);\r\n    }\r\n\r\n    initializedĞ¡opy(nodes, location) {\r\n        const nodesCopy = [];\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const { children, title } = nodes[i];\r\n            const hasChildren = children !== undefined;\r\n            const id = location ? `${location}.${i + 1}` : `${i + 1}`;\r\n            nodesCopy[i] = { \r\n                    children: hasChildren ? this.initializedĞ¡opy(children, id) : undefined,\r\n                    changeTitle: this.changeTitle(id),\r\n                    removeNode: this.removeNode(id),\r\n                    addChild: this.addChild(id),\r\n                    id,\r\n                    title,\r\n            };\r\n        }\r\n        return nodesCopy;\r\n    }\r\n\r\n    changeTitle(id) {\r\n        return (newTitle) => {\r\n            id = id.split(\".\").map((str) => parseInt(str));\r\n            const nodes = this.initializedĞ¡opy(this.state.nodes);\r\n            let changingNode = nodes[id[0] - 1];\r\n\r\n            if (id.length > 1) {\r\n                for (let i = 1; i < id.length; i++) {\r\n                    changingNode = changingNode.children[id[i] - 1];\r\n                }\r\n            }\r\n\r\n            changingNode.title = newTitle;\r\n            this.setState({ nodes });\r\n        };\r\n    }\r\n\r\n    addRootElement() {\r\n        const id = this.state.nodes.length ? `${this.state.nodes.length + 1}` : \"1\";\r\n        const newNode = { \r\n            children: undefined,\r\n            changeTitle: this.changeTitle(id),\r\n            removeNode: this.removeNode(id),\r\n            addChild: this.addChild(id),\r\n            id,\r\n            title: \"\",\r\n        };\r\n        \r\n        const nodes = [...this.state.nodes, newNode];\r\n        this.setState({ nodes });\r\n    }\r\n\r\n    addChild(id) {\r\n        return () => {\r\n            id = id.split(\".\").map((str) => parseInt(str));\r\n            const nodes = this.initializedĞ¡opy(this.state.nodes);\r\n            let changingNode = nodes[id[0] - 1];\r\n\r\n            if (id.length > 1) {\r\n                for (let i = 1; i < id.length; i++) {\r\n                    changingNode = changingNode.children[id[i] - 1];\r\n                }\r\n            }\r\n\r\n            if (changingNode.children === undefined) {\r\n                changingNode.children = [];\r\n            }\r\n            \r\n            id = `${id.join(\".\")}.${changingNode.children.length + 1}`;\r\n\r\n            changingNode.children = [\r\n                ...changingNode.children,\r\n                { \r\n                    children: undefined,\r\n                    changeTitle: this.changeTitle(id),\r\n                    removeNode: this.removeNode(id),\r\n                    addChild: this.addChild(id),\r\n                    id,\r\n                    title: \"\",\r\n                }];\r\n\r\n            this.setState({ nodes });\r\n        }\r\n    }\r\n\r\n    removeNode(id) {\r\n        return () => {\r\n            id = id.split(\".\").map((str) => parseInt(str));\r\n            const nodes = this.initializedĞ¡opy(this.state.nodes);\r\n\r\n            if (id.length === 1) {\r\n                const newNodes = [\r\n                    ...nodes.slice(0, [id[0] - 1]),\r\n                    ...nodes.slice(id[0])\r\n                ];\r\n\r\n                this.setState( { nodes: this.initializedĞ¡opy(newNodes) } );\r\n\r\n            } else {\r\n                let changingNode = nodes[id[0] - 1];\r\n                \r\n                for (let i = 2; i < id.length; i++) {\r\n                    changingNode = changingNode.children[id[i - 1] - 1];\r\n                }\r\n\r\n                const index = id[id.length - 1] - 1;\r\n\r\n                const newChildren = [\r\n                    ...changingNode.children.slice(0, index),\r\n                    ...changingNode.children.slice(index + 1),\r\n                ];\r\n                changingNode.children = newChildren;\r\n\r\n                this.setState({ nodes: this.initializedĞ¡opy(nodes) });\r\n            }\r\n        }\r\n    }\r\n\r\n    saveState() {\r\n        this.setState({ savedNodes: this.initializedĞ¡opy(this.state.nodes) });\r\n    }\r\n\r\n    loadState() {\r\n        this.setState({ nodes: this.initializedĞ¡opy(this.state.savedNodes) });\r\n    }\r\n\r\n    onTextChange(e) { \r\n        this.setState({ nodes: this.initializedĞ¡opy(JSON.parse(e.target.value)) });\r\n    }\r\n\r\n    nodesToString() {\r\n        return JSON.stringify(this.simplify(this.state.nodes), undefined, 2);\r\n    }\r\n\r\n    simplify(nodes) {\r\n        const nodesCopy = [];\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const { children, title } = nodes[i];\r\n            const hasChildren = children !== undefined && children.length > 0;\r\n            nodesCopy[i] = { \r\n                title,\r\n                children: hasChildren ? this.simplify(children) : undefined,\r\n            };\r\n        }\r\n        return nodesCopy;\r\n    }\r\n\r\n    render() {\r\n        const { nodes, savedNodes } = this.state;\r\n        const { addRootElement, saveState, \r\n                loadState, onTextChange, nodesToString} = this;\r\n        const hasSaved = savedNodes.length !== 0;\r\n\r\n        return (\r\n            <div className=\"Tree\">\r\n            \r\n                <div className=\"Tree-LeftSide\">\r\n                <ControlPanel {...{ hasSaved, saveState, loadState }} />\r\n                  <ul className=\"Nodes\">\r\n                    { nodes.map((nodeProps) => {\r\n                      const { id, ...others } = nodeProps;\r\n                      return (\r\n                        <TreeNode \r\n                          key={id}\r\n                          {...others}\r\n                        />\r\n                      );}) }\r\n                  </ul>\r\n                  <AddButton onClick={addRootElement} />\r\n               </div>\r\n\r\n               <div className=\"Tree-RightSide\">\r\n                   <TextView\r\n                     value={nodesToString()}\r\n                     onChange={onTextChange}\r\n                   />\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tree;","export const DEFAULT_NODES = [\r\n    {\r\n        \"title\": \"Tea\",\r\n        \"children\": [\r\n            {\r\n                \"title\": \"Black\",\r\n                \"children\": [\r\n                    {\r\n                        \"title\": \"Assam\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Earl Grey\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Lapsang Souchong\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"title\": \"Green\",\r\n                \"children\": [\r\n                    {\r\n                        \"title\": \"Japanese Sencha\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Jasmine Pearls\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"title\": \"Coffee\",\r\n        \"children\": [\r\n            {\r\n                \"title\": \"Espresso\"\r\n            },\r\n            {\r\n                \"title\": \"Mochaccino\"\r\n            },\r\n            {\r\n                \"title\": \"Flat White\"\r\n            },\r\n            {\r\n                \"title\": \"Iced Latte\",\r\n                \"children\": [\r\n                    {\r\n                        \"title\": \"Vanilla\"\r\n                    },\r\n                    {\r\n                        \"title\": \"Gingerbread\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"title\": \"Milk\"\r\n    }\r\n];","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Tree from \"./components/tree\";\r\nimport { DEFAULT_NODES } from \"./constants\";\r\n\r\nclass App extends Component {\r\n\r\n    render() {      \r\n    return (\r\n      <Tree data={DEFAULT_NODES}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}